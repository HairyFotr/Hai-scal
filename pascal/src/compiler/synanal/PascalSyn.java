
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 27 13:37:35 CEST 2012
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 27 13:37:35 CEST 2012
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\004\002\000\002\004\004\000\002\011\003" +
    "\000\002\011\004\000\002\012\006\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\013\005\000\002\013\004" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\026\005\000\002\027\002\000\002\027\005\000\002" +
    "\027\003\000\002\005\002\000\002\005\004\000\002\014" +
    "\003\000\002\014\004\000\002\015\006\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\004\000\002\016\005\000\002" +
    "\022\012\000\002\021\005\000\002\006\002\000\002\006" +
    "\004\000\002\017\003\000\002\017\004\000\002\020\006" +
    "\000\002\007\002\000\002\007\004\000\002\007\004\000" +
    "\002\023\014\000\002\024\012\000\002\025\005\000\002" +
    "\030\002\000\002\030\003\000\002\030\005\000\002\031" +
    "\005\000\002\010\004\000\002\032\005\000\002\033\002" +
    "\000\002\033\005\000\002\034\002\000\002\034\003\000" +
    "\002\034\003\000\002\034\005\000\002\034\006\000\002" +
    "\034\010\000\002\034\006\000\002\034\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\063\006\001\002\000\016\051\ufffe\052" +
    "\012\057\ufffe\062\ufffe\067\ufffe\070\ufffe\001\002\000\004" +
    "\002\011\001\002\000\004\010\007\001\002\000\004\024" +
    "\010\001\002\000\016\051\uffff\052\uffff\057\uffff\062\uffff" +
    "\067\uffff\070\uffff\001\002\000\004\002\001\001\002\000" +
    "\004\010\254\001\002\000\014\051\uffda\057\uffda\062\uffda" +
    "\067\015\070\uffda\001\002\000\012\051\uffcc\057\uffcc\062" +
    "\uffcc\070\150\001\002\000\004\010\020\001\002\000\012" +
    "\051\uffd9\057\uffd9\062\uffd9\070\uffd9\001\002\000\014\010" +
    "\020\051\uffd8\057\uffd8\062\uffd8\070\uffd8\001\002\000\004" +
    "\030\021\001\002\000\020\011\024\012\033\013\022\021" +
    "\023\042\030\047\025\064\026\001\002\000\010\022\uffd3" +
    "\023\uffd3\024\uffd3\001\002\000\020\011\024\012\033\013" +
    "\022\021\023\042\030\047\025\064\026\001\002\000\010" +
    "\022\uffd5\023\uffd5\024\uffd5\001\002\000\004\020\046\001" +
    "\002\000\004\010\040\001\002\000\010\022\uffd2\023\uffd2" +
    "\024\uffd2\001\002\000\020\011\024\012\033\013\022\021" +
    "\023\042\030\047\025\064\026\001\002\000\010\022\uffd1" +
    "\023\uffd1\024\uffd1\001\002\000\004\024\034\001\002\000" +
    "\010\022\uffd4\023\uffd4\024\uffd4\001\002\000\014\010\uffd6" +
    "\051\uffd6\057\uffd6\062\uffd6\070\uffd6\001\002\000\010\022" +
    "\uffd0\023\uffd0\024\uffd0\001\002\000\004\055\045\001\002" +
    "\000\014\010\040\051\uffca\055\uffca\057\uffca\062\uffca\001" +
    "\002\000\004\014\041\001\002\000\020\011\024\012\033" +
    "\013\022\021\023\042\030\047\025\064\026\001\002\000" +
    "\004\024\043\001\002\000\014\010\uffc8\051\uffc8\055\uffc8" +
    "\057\uffc8\062\uffc8\001\002\000\012\051\uffc9\055\uffc9\057" +
    "\uffc9\062\uffc9\001\002\000\010\022\uffcd\023\uffcd\024\uffcd" +
    "\001\002\000\030\004\053\005\056\006\050\007\051\010" +
    "\057\020\062\021\047\025\052\040\061\042\054\043\055" +
    "\001\002\000\030\004\053\005\056\006\050\007\051\010" +
    "\057\020\062\021\047\025\052\040\061\042\054\043\055" +
    "\001\002\000\062\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\050\ufff7\053\ufff7\065\ufff7\066\ufff7" +
    "\001\002\000\062\015\ufff6\016\ufff6\017\ufff6\020\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6\037\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\050\ufff6\053\ufff6\065\ufff6\066\ufff6" +
    "\001\002\000\030\004\053\005\056\006\050\007\051\010" +
    "\057\020\062\021\047\025\052\040\061\042\054\043\055" +
    "\001\002\000\062\015\ufff9\016\ufff9\017\ufff9\020\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\050\ufff9\053\ufff9\065\ufff9\066\ufff9" +
    "\001\002\000\030\004\053\005\056\006\050\007\051\010" +
    "\057\020\062\021\047\025\052\040\061\042\054\043\055" +
    "\001\002\000\030\004\053\005\056\006\050\007\051\010" +
    "\057\020\062\021\047\025\052\040\061\042\054\043\055" +
    "\001\002\000\062\015\ufff8\016\ufff8\017\ufff8\020\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\050\ufff8\053\ufff8\065\ufff8\066\ufff8" +
    "\001\002\000\064\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\132\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\036\uffdf\037" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\050\uffdf\053\uffdf\065\uffdf" +
    "\066\uffdf\001\002\000\042\016\077\017\124\020\102\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\001" +
    "\002\000\030\004\053\005\056\006\050\007\051\010\057" +
    "\020\062\021\047\025\052\040\061\042\054\043\055\001" +
    "\002\000\020\011\024\012\033\013\022\021\023\042\030" +
    "\047\025\064\026\001\002\000\004\022\064\001\002\000" +
    "\062\015\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\050\uffe1\053\uffe1\065\uffe1\066\uffe1\001\002\000" +
    "\062\015\ufff2\016\077\017\ufff2\020\102\022\ufff2\023\ufff2" +
    "\024\ufff2\025\073\026\066\027\076\030\070\031\101\032" +
    "\067\033\104\034\071\036\100\037\072\041\103\042\075" +
    "\043\074\050\ufff2\053\ufff2\065\ufff2\066\ufff2\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\062\015\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\036\ufff1\037\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\050\ufff1\053\ufff1\065\ufff1\066\ufff1\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\030\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\025\052\040\061\042\054\043\055\001\002\000" +
    "\062\015\uffe9\016\077\017\uffe9\020\102\022\uffe9\023\uffe9" +
    "\024\uffe9\025\073\026\066\027\076\030\070\031\101\032" +
    "\067\033\104\034\071\036\100\037\072\041\103\042\075" +
    "\043\074\050\uffe9\053\uffe9\065\uffe9\066\uffe9\001\002\000" +
    "\062\015\uffe5\016\077\017\uffe5\020\102\022\uffe5\023\uffe5" +
    "\024\uffe5\025\073\026\066\027\076\030\070\031\101\032" +
    "\067\033\104\034\071\036\100\037\072\041\103\042\075" +
    "\043\074\050\uffe5\053\uffe5\065\uffe5\066\uffe5\001\002\000" +
    "\042\016\077\020\102\022\110\025\073\026\066\027\076" +
    "\030\070\031\101\032\067\033\104\034\071\036\100\037" +
    "\072\041\103\042\075\043\074\001\002\000\062\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\036\uffe4\037\uffe4\041\uffe4\042\uffe4\043\uffe4\050" +
    "\uffe4\053\uffe4\065\uffe4\066\uffe4\001\002\000\062\015\uffea" +
    "\016\077\017\uffea\020\102\022\uffea\023\uffea\024\uffea\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffea\053\uffea\065\uffea\066\uffea\001\002\000\062\015\ufff0" +
    "\016\077\017\ufff0\020\102\022\ufff0\023\ufff0\024\ufff0\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\ufff0\053\ufff0\065\ufff0\066\ufff0\001\002\000\062\015\uffe3" +
    "\016\077\017\uffe3\020\102\022\uffe3\023\uffe3\024\uffe3\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffe3\053\uffe3\065\uffe3\066\uffe3\001\002\000\062\015\uffef" +
    "\016\077\017\uffef\020\102\022\uffef\023\uffef\024\uffef\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffef\053\uffef\065\uffef\066\uffef\001\002\000\062\015\uffed" +
    "\016\077\017\uffed\020\102\022\uffed\023\uffed\024\uffed\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffed\053\uffed\065\uffed\066\uffed\001\002\000\062\015\uffee" +
    "\016\077\017\uffee\020\102\022\uffee\023\uffee\024\uffee\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffee\053\uffee\065\uffee\066\uffee\001\002\000\062\015\uffeb" +
    "\016\077\017\uffeb\020\102\022\uffeb\023\uffeb\024\uffeb\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffeb\053\uffeb\065\uffeb\066\uffeb\001\002\000\062\015\uffe7" +
    "\016\077\017\uffe7\020\102\022\uffe7\023\uffe7\024\uffe7\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffe7\053\uffe7\065\uffe7\066\uffe7\001\002\000\062\015\uffec" +
    "\016\077\017\uffec\020\102\022\uffec\023\uffec\024\uffec\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffec\053\uffec\065\uffec\066\uffec\001\002\000\062\015\uffe8" +
    "\016\077\017\uffe8\020\102\022\uffe8\023\uffe8\024\uffe8\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffe8\053\uffe8\065\uffe8\066\uffe8\001\002\000\062\015\uffe6" +
    "\016\077\017\uffe6\020\102\022\uffe6\023\uffe6\024\uffe6\025" +
    "\073\026\066\027\076\030\070\031\101\032\067\033\104" +
    "\034\071\036\100\037\072\041\103\042\075\043\074\050" +
    "\uffe6\053\uffe6\065\uffe6\066\uffe6\001\002\000\030\004\053" +
    "\005\056\006\050\007\051\010\057\020\062\021\047\025" +
    "\052\040\061\042\054\043\055\001\002\000\042\016\077" +
    "\020\102\022\126\025\073\026\066\027\076\030\070\031" +
    "\101\032\067\033\104\034\071\036\100\037\072\041\103" +
    "\042\075\043\074\001\002\000\004\061\127\001\002\000" +
    "\020\011\024\012\033\013\022\021\023\042\030\047\025" +
    "\064\026\001\002\000\010\022\uffce\023\uffce\024\uffce\001" +
    "\002\000\062\015\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2\037\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\050\uffe2\053\uffe2\065\uffe2\066\uffe2\001" +
    "\002\000\032\004\053\005\056\006\050\007\051\010\057" +
    "\020\062\021\047\023\uffdd\025\052\040\061\042\054\043" +
    "\055\001\002\000\004\023\137\001\002\000\044\015\135" +
    "\016\077\020\102\023\uffdb\025\073\026\066\027\076\030" +
    "\070\031\101\032\067\033\104\034\071\036\100\037\072" +
    "\041\103\042\075\043\074\001\002\000\030\004\053\005" +
    "\056\006\050\007\051\010\057\020\062\021\047\025\052" +
    "\040\061\042\054\043\055\001\002\000\042\016\077\020" +
    "\102\023\uffdc\025\073\026\066\027\076\030\070\031\101" +
    "\032\067\033\104\034\071\036\100\037\072\041\103\042" +
    "\075\043\074\001\002\000\062\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde" +
    "\037\uffde\041\uffde\042\uffde\043\uffde\050\uffde\053\uffde\065" +
    "\uffde\066\uffde\001\002\000\062\015\ufff3\016\077\017\ufff3" +
    "\020\102\022\ufff3\023\ufff3\024\ufff3\025\073\026\066\027" +
    "\076\030\070\031\101\032\067\033\104\034\071\036\100" +
    "\037\072\041\103\042\075\043\074\050\ufff3\053\ufff3\065" +
    "\ufff3\066\ufff3\001\002\000\062\015\ufff5\016\077\017\ufff5" +
    "\020\102\022\ufff5\023\ufff5\024\ufff5\025\073\026\066\027" +
    "\076\030\070\031\101\032\067\033\104\034\071\036\100" +
    "\037\072\041\103\042\075\043\074\050\ufff5\053\ufff5\065" +
    "\ufff5\066\ufff5\001\002\000\062\015\ufff4\016\077\017\ufff4" +
    "\020\102\022\ufff4\023\ufff4\024\ufff4\025\073\026\066\027" +
    "\076\030\070\031\101\032\067\033\104\034\071\036\100" +
    "\037\072\041\103\042\075\043\074\050\ufff4\053\ufff4\065" +
    "\ufff4\066\ufff4\001\002\000\042\016\077\020\102\023\144" +
    "\025\073\026\066\027\076\030\070\031\101\032\067\033" +
    "\104\034\071\036\100\037\072\041\103\042\075\043\074" +
    "\001\002\000\062\015\uffe0\016\uffe0\017\uffe0\020\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\050\uffe0\053\uffe0\065\uffe0\066\uffe0" +
    "\001\002\000\004\023\146\001\002\000\010\022\uffcf\023" +
    "\uffcf\024\uffcf\001\002\000\012\051\uffd7\057\uffd7\062\uffd7" +
    "\070\uffd7\001\002\000\004\010\040\001\002\000\010\051" +
    "\uffc7\057\156\062\153\001\002\000\010\051\uffc7\057\156" +
    "\062\153\001\002\000\004\021\160\001\002\000\010\051" +
    "\uffc7\057\156\062\153\001\002\000\004\051\200\001\002" +
    "\000\004\021\160\001\002\000\004\014\171\001\002\000" +
    "\006\010\162\023\uffc1\001\002\000\006\023\uffc0\024\167" +
    "\001\002\000\004\014\165\001\002\000\004\023\164\001" +
    "\002\000\006\014\uffc2\024\uffc2\001\002\000\020\011\024" +
    "\012\033\013\022\021\023\042\030\047\025\064\026\001" +
    "\002\000\006\023\uffbe\024\uffbe\001\002\000\006\010\162" +
    "\023\uffc1\001\002\000\004\023\uffbf\001\002\000\020\011" +
    "\024\012\033\013\022\021\023\042\030\047\025\064\026" +
    "\001\002\000\004\024\173\001\002\000\012\051\ufffe\052" +
    "\012\067\ufffe\070\ufffe\001\002\000\010\051\uffda\067\015" +
    "\070\uffda\001\002\000\006\051\uffcc\070\150\001\002\000" +
    "\004\051\200\001\002\000\004\024\234\001\002\000\044" +
    "\004\053\005\056\006\050\007\051\010\057\020\062\021" +
    "\047\024\uffb9\025\052\040\061\042\054\043\055\051\200" +
    "\055\uffbb\056\207\060\203\071\201\001\002\000\030\004" +
    "\053\005\056\006\050\007\051\010\057\020\062\021\047" +
    "\025\052\040\061\042\054\043\055\001\002\000\004\024" +
    "\227\001\002\000\030\004\053\005\056\006\050\007\051" +
    "\010\057\020\062\021\047\025\052\040\061\042\054\043" +
    "\055\001\002\000\004\024\uffb8\001\002\000\004\055\221" +
    "\001\002\000\044\016\077\020\102\024\uffb7\025\073\026" +
    "\066\027\076\030\070\031\101\032\067\033\104\034\071" +
    "\036\100\037\072\041\103\042\075\043\074\050\217\001" +
    "\002\000\004\010\210\001\002\000\004\050\211\001\002" +
    "\000\030\004\053\005\056\006\050\007\051\010\057\020" +
    "\062\021\047\025\052\040\061\042\054\043\055\001\002" +
    "\000\042\016\077\020\102\025\073\026\066\027\076\030" +
    "\070\031\101\032\067\033\104\034\071\036\100\037\072" +
    "\041\103\042\075\043\074\066\213\001\002\000\030\004" +
    "\053\005\056\006\050\007\051\010\057\020\062\021\047" +
    "\025\052\040\061\042\054\043\055\001\002\000\042\016" +
    "\077\020\102\025\073\026\066\027\076\030\070\031\101" +
    "\032\067\033\104\034\071\036\100\037\072\041\103\042" +
    "\075\043\074\053\215\001\002\000\042\004\053\005\056" +
    "\006\050\007\051\010\057\020\062\021\047\024\uffbb\025" +
    "\052\040\061\042\054\043\055\051\200\056\207\060\203" +
    "\071\201\001\002\000\004\024\uffb2\001\002\000\030\004" +
    "\053\005\056\006\050\007\051\010\057\020\062\021\047" +
    "\025\052\040\061\042\054\043\055\001\002\000\042\016" +
    "\077\020\102\024\uffb6\025\073\026\066\027\076\030\070" +
    "\031\101\032\067\033\104\034\071\036\100\037\072\041" +
    "\103\042\075\043\074\001\002\000\006\016\uffbc\024\uffbc" +
    "\001\002\000\042\016\077\020\102\025\073\026\066\027" +
    "\076\030\070\031\101\032\067\033\104\034\071\036\100" +
    "\037\072\041\103\042\075\043\074\065\223\001\002\000" +
    "\044\004\053\005\056\006\050\007\051\010\057\020\062" +
    "\021\047\024\uffbb\025\052\040\061\042\054\043\055\051" +
    "\200\054\uffbb\056\207\060\203\071\201\001\002\000\006" +
    "\024\uffb5\054\225\001\002\000\042\004\053\005\056\006" +
    "\050\007\051\010\057\020\062\021\047\024\uffbb\025\052" +
    "\040\061\042\054\043\055\051\200\056\207\060\203\071" +
    "\201\001\002\000\004\024\uffb4\001\002\000\046\004\053" +
    "\005\056\006\050\007\051\010\057\020\062\021\047\024" +
    "\uffbb\025\052\040\061\042\054\043\055\051\200\054\uffbb" +
    "\055\uffbb\056\207\060\203\071\201\001\002\000\010\024" +
    "\uffba\054\uffba\055\uffba\001\002\000\042\016\077\020\102" +
    "\025\073\026\066\027\076\030\070\031\101\032\067\033" +
    "\104\034\071\036\100\037\072\041\103\042\075\043\074" +
    "\053\232\001\002\000\042\004\053\005\056\006\050\007" +
    "\051\010\057\020\062\021\047\024\uffbb\025\052\040\061" +
    "\042\054\043\055\051\200\056\207\060\203\071\201\001" +
    "\002\000\004\024\uffb3\001\002\000\010\051\uffc4\057\uffc4" +
    "\062\uffc4\001\002\000\004\016\237\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffbd\001\002\000\004\051\uffc6" +
    "\001\002\000\004\024\242\001\002\000\012\051\ufffe\052" +
    "\012\067\ufffe\070\ufffe\001\002\000\010\051\uffda\067\015" +
    "\070\uffda\001\002\000\006\051\uffcc\070\150\001\002\000" +
    "\004\051\200\001\002\000\004\024\247\001\002\000\010" +
    "\051\uffc3\057\uffc3\062\uffc3\001\002\000\004\051\uffc5\001" +
    "\002\000\010\051\uffcb\057\uffcb\062\uffcb\001\002\000\016" +
    "\010\254\051\ufffc\057\ufffc\062\ufffc\067\ufffc\070\ufffc\001" +
    "\002\000\014\051\ufffd\057\ufffd\062\ufffd\067\ufffd\070\ufffd" +
    "\001\002\000\004\050\255\001\002\000\030\004\053\005" +
    "\056\006\050\007\051\010\057\020\062\021\047\025\052" +
    "\040\061\042\054\043\055\001\002\000\042\016\077\020" +
    "\102\024\257\025\073\026\066\027\076\030\070\031\101" +
    "\032\067\033\104\034\071\036\100\037\072\041\103\042" +
    "\075\043\074\001\002\000\016\010\ufffa\051\ufffa\057\ufffa" +
    "\062\ufffa\067\ufffa\070\ufffa\001\002\000\014\051\ufffb\057" +
    "\ufffb\062\ufffb\067\ufffb\070\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\004\003\003\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\252\012\251\001\001\000\004\005\013\001\001\000\004" +
    "\006\150\001\001\000\006\014\015\015\016\001\001\000" +
    "\002\001\001\000\006\014\146\015\016\001\001\000\002" +
    "\001\001\000\010\016\031\021\026\022\030\001\001\000" +
    "\002\001\001\000\010\016\144\021\026\022\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\035\020" +
    "\036\001\001\000\002\001\001\000\010\016\034\021\026" +
    "\022\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\043\020\036\001\001\000\002\001" +
    "\001\000\010\016\041\021\026\022\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\057\001\001\000\004\013\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\141\001" +
    "\001\000\002\001\001\000\004\013\140\001\001\000\004" +
    "\013\137\001\001\000\002\001\001\000\004\026\130\001" +
    "\001\000\002\001\001\000\004\013\064\001\001\000\010" +
    "\016\062\021\026\022\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\122\001\001" +
    "\000\004\013\121\001\001\000\004\013\120\001\001\000" +
    "\004\013\117\001\001\000\004\013\116\001\001\000\004" +
    "\013\115\001\001\000\004\013\114\001\001\000\002\001" +
    "\001\000\004\013\113\001\001\000\004\013\112\001\001" +
    "\000\004\013\111\001\001\000\004\013\110\001\001\000" +
    "\004\013\106\001\001\000\004\013\105\001\001\000\004" +
    "\013\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\127\021\026\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\133\027\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\250\020\036\001\001\000\010\007" +
    "\154\023\153\024\151\001\001\000\010\007\247\023\153" +
    "\024\151\001\001\000\004\025\240\001\001\000\010\007" +
    "\237\023\153\024\151\001\001\000\006\010\235\032\234" +
    "\001\001\000\004\025\156\001\001\000\002\001\001\000" +
    "\006\030\162\031\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\165\021\026\022\030\001\001\000\002\001\001\000\006" +
    "\030\167\031\160\001\001\000\002\001\001\000\010\016" +
    "\171\021\026\022\030\001\001\000\002\001\001\000\004" +
    "\004\173\001\001\000\004\005\174\001\001\000\004\006" +
    "\175\001\001\000\004\032\176\001\001\000\002\001\001" +
    "\000\012\013\205\032\203\033\204\034\201\001\001\000" +
    "\004\013\230\001\001\000\002\001\001\000\004\013\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\211" +
    "\001\001\000\002\001\001\000\004\013\213\001\001\000" +
    "\002\001\001\000\012\013\205\032\203\033\215\034\201" +
    "\001\001\000\002\001\001\000\004\013\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\205\032\203\033\223\034\201\001\001\000\002\001" +
    "\001\000\012\013\205\032\203\033\225\034\201\001\001" +
    "\000\002\001\001\000\012\013\205\032\203\033\227\034" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\205\032\203\033\232\034\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\242\001\001\000\004\005\243\001\001\000\004" +
    "\006\244\001\001\000\004\032\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\257\012\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bblock ::= FOR IDENTIFIER ASSIGN value TO value DO block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("bblock",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bblock ::= WHILE value DO block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("bblock",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bblock ::= IF value THEN block ELSE block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("bblock",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bblock ::= IF value THEN block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("bblock",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bblock ::= value ASSIGN value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("bblock",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bblock ::= value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("bblock",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bblock ::= block_beginend 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("bblock",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bblock ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("bblock",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // block ::= bblock SEMIC block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("block",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // block ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("block",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // block_beginend ::= BEGIN block END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("block_beginend",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // main_block ::= block_beginend DOT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("main_block",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // var_declaration2 ::= IDENTIFIER COLON type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declaration2",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // var_declarations2 ::= var_declaration2 SEMIC var_declarations2 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations2",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var_declarations2 ::= var_declaration2 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations2",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_declarations2 ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations2",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parameters ::= LPARENTHESIS var_declarations2 RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // proc ::= PROCEDURE parameters SEMIC constdec_opt typedec_opt vardec_opt block_beginend SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("proc",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // func ::= FUNCTION parameters COLON type SEMIC constdec_opt typedec_opt vardec_opt block_beginend SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("func",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-9)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funcproc_opt ::= proc funcproc_opt 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("funcproc_opt",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcproc_opt ::= func funcproc_opt 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("funcproc_opt",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcproc_opt ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("funcproc_opt",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var_declaration ::= IDENTIFIER COLON type SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declaration",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var_declarations ::= var_declaration var_declarations 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var_declarations ::= var_declaration 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // vardec_opt ::= VAR var_declarations 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vardec_opt",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // vardec_opt ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vardec_opt",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // record ::= RECORD var_declarations END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array ::= ARRAY LBRACKET value DOTS value RBRACKET OF type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("array",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= LPARENTHESIS type RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= PTR type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= array 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= record 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= INT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_declaration ::= IDENTIFIER EQU type SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declaration",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_declarations ::= type_declaration type_declarations 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_declarations ::= type_declaration 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typedec_opt ::= TYPE type_declarations 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("typedec_opt",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // typedec_opt ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("typedec_opt",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value_list ::= value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value_list ::= value COMMA value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value_list ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameters_call ::= LPARENTHESIS value_list RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters_call",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= LPARENTHESIS value RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= LBRACKET type RBRACKET 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // value ::= IDENTIFIER parameters_call 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // value ::= value DOT value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // value ::= value LBRACKET value RBRACKET 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // value ::= value OR value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= value AND value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= value LTH value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // value ::= value GTH value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // value ::= value LEQ value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // value ::= value GEQ value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // value ::= value NEQ value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // value ::= value EQU value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // value ::= value SUB value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // value ::= value ADD value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // value ::= value DIV value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value ::= value MUL value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // value ::= value PTR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value ::= NOT value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value ::= SUB value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // value ::= ADD value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // value ::= PTR value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // value ::= NIL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // value ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // value ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // value ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_declaration ::= IDENTIFIER ASSIGN value SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_declaration",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declarations ::= const_declaration const_declarations 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_declarations",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_declarations ::= const_declaration 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_declarations",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constdec_opt ::= CONST const_declarations 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constdec_opt",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constdec_opt ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constdec_opt",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM IDENTIFIER SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= program constdec_opt typedec_opt vardec_opt funcproc_opt main_block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

