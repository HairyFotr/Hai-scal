
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 22 18:59:26 CEST 2012
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;
import compiler.abstree.tree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 22 18:59:26 CEST 2012
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\012\000\002\043" +
    "\002\000\002\004\003\000\002\004\004\000\002\011\003" +
    "\000\002\011\004\000\002\012\006\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\013\005\000\002\013\004" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\013\005\000\002\026\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\005\000\002\005\003\000\002\005" +
    "\004\000\002\014\003\000\002\014\004\000\002\015\006" +
    "\000\002\015\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\004\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\022\012\000\002\021\005" +
    "\000\002\040\003\000\002\040\005\000\002\006\003\000" +
    "\002\006\004\000\002\017\004\000\002\017\005\000\002" +
    "\020\005\000\002\007\003\000\002\007\004\000\002\007" +
    "\004\000\002\023\020\000\002\024\016\000\002\025\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\005\000" +
    "\002\031\005\000\002\010\006\000\002\033\003\000\002" +
    "\033\003\000\002\033\005\000\002\033\005\000\002\032" +
    "\005\000\002\032\003\000\002\032\005\000\002\032\006" +
    "\000\002\032\010\000\002\032\006\000\002\032\012\000" +
    "\002\032\005\000\002\032\004\000\002\041\002\000\002" +
    "\041\004\000\002\042\005\000\002\034\002\000\002\034" +
    "\003\000\002\035\002\000\002\035\004\000\002\036\003" +
    "\000\002\036\004\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\064\005\001\002\000\004\002\320\001" +
    "\002\000\004\010\006\001\002\000\004\024\007\001\002" +
    "\000\016\052\uffff\053\010\060\uffff\063\uffff\070\uffff\071" +
    "\uffff\001\002\000\004\010\313\001\002\000\014\052\ufffe" +
    "\060\ufffe\063\ufffe\070\ufffe\071\ufffe\001\002\000\014\052" +
    "\uffff\060\uffff\063\uffff\070\015\071\uffff\001\002\000\012" +
    "\052\uffd9\060\uffd9\063\uffd9\071\uffd9\001\002\000\012\052" +
    "\uffff\060\uffff\063\uffff\071\157\001\002\000\004\010\020" +
    "\001\002\000\012\052\uffd8\060\uffd8\063\uffd8\071\uffd8\001" +
    "\002\000\014\010\020\052\uffd7\060\uffd7\063\uffd7\071\uffd7" +
    "\001\002\000\004\030\021\001\002\000\026\010\034\011" +
    "\024\012\036\013\022\021\023\043\031\050\025\065\026" +
    "\074\035\076\027\001\002\000\012\022\uffd1\023\uffd1\024" +
    "\uffd1\056\uffd1\001\002\000\026\010\034\011\024\012\036" +
    "\013\022\021\023\043\031\050\025\065\026\074\035\076" +
    "\027\001\002\000\012\022\uffd3\023\uffd3\024\uffd3\056\uffd3" +
    "\001\002\000\004\020\052\001\002\000\004\010\044\001" +
    "\002\000\012\022\uffca\023\uffca\024\uffca\056\uffca\001\002" +
    "\000\016\010\uffd4\024\uffcf\052\uffd4\060\uffd4\063\uffd4\071" +
    "\uffd4\001\002\000\026\010\034\011\024\012\036\013\022" +
    "\021\023\043\031\050\025\065\026\074\035\076\027\001" +
    "\002\000\012\022\uffce\023\uffce\024\uffce\056\uffce\001\002" +
    "\000\004\024\037\001\002\000\012\022\uffcb\023\uffcb\024" +
    "\uffcb\056\uffcb\001\002\000\012\022\uffd0\023\uffd0\024\uffd0" +
    "\056\uffd0\001\002\000\012\022\uffd2\023\uffd2\024\uffd2\056" +
    "\uffd2\001\002\000\014\010\uffd5\052\uffd5\060\uffd5\063\uffd5" +
    "\071\uffd5\001\002\000\012\022\uffcf\023\uffcf\024\uffcf\056" +
    "\uffcf\001\002\000\012\022\uffcd\023\uffcd\024\uffcd\056\uffcd" +
    "\001\002\000\004\056\051\001\002\000\006\024\047\056" +
    "\uffc7\001\002\000\004\014\045\001\002\000\026\010\034" +
    "\011\024\012\036\013\022\021\023\043\031\050\025\065" +
    "\026\074\035\076\027\001\002\000\006\024\uffc1\056\uffc1" +
    "\001\002\000\004\010\044\001\002\000\004\056\uffc6\001" +
    "\002\000\024\010\uffc8\022\uffc8\023\uffc8\024\uffc8\052\uffc8" +
    "\056\uffc8\060\uffc8\063\uffc8\071\uffc8\001\002\000\030\004" +
    "\057\005\062\006\054\007\055\010\063\020\066\021\053" +
    "\025\056\041\065\043\060\044\061\001\002\000\030\004" +
    "\057\005\062\006\054\007\055\010\063\020\066\021\053" +
    "\025\056\041\065\043\060\044\061\001\002\000\072\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\051\ufff7\054\ufff7\055\ufff7\056\ufff7\062\ufff7\066" +
    "\ufff7\067\ufff7\001\002\000\072\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6\051\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\062\ufff6\066\ufff6\067\ufff6\001\002" +
    "\000\030\004\057\005\062\006\054\007\055\010\063\020" +
    "\066\021\053\025\056\041\065\043\060\044\061\001\002" +
    "\000\072\015\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037\ufff9\040\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\051\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\062\ufff9\066\ufff9\067\ufff9\001\002\000\030\004\057\005" +
    "\062\006\054\007\055\010\063\020\066\021\053\025\056" +
    "\041\065\043\060\044\061\001\002\000\030\004\057\005" +
    "\062\006\054\007\055\010\063\020\066\021\053\025\056" +
    "\041\065\043\060\044\061\001\002\000\072\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\051\ufff8\054\ufff8\055\ufff8\056\ufff8\062\ufff8\066\ufff8\067" +
    "\ufff8\001\002\000\074\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\140\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\051\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\062\uffdf\066\uffdf\067\uffdf\001\002" +
    "\000\044\016\104\017\132\020\107\025\100\026\072\027" +
    "\103\030\074\031\106\032\073\033\111\034\075\036\105" +
    "\037\076\040\077\042\110\043\102\044\101\001\002\000" +
    "\030\004\057\005\062\006\054\007\055\010\063\020\066" +
    "\021\053\025\056\041\065\043\060\044\061\001\002\000" +
    "\026\010\034\011\024\012\036\013\022\021\023\043\031" +
    "\050\025\065\026\074\035\076\027\001\002\000\004\022" +
    "\070\001\002\000\072\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\042\uffe1\043\uffe1\044\uffe1\051\uffe1\054\uffe1\055" +
    "\uffe1\056\uffe1\062\uffe1\066\uffe1\067\uffe1\001\002\000\072" +
    "\015\ufff2\016\104\017\ufff2\020\107\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\051\ufff2\054\ufff2\055\ufff2\056\ufff2\062\ufff2" +
    "\066\ufff2\067\ufff2\001\002\000\030\004\057\005\062\006" +
    "\054\007\055\010\063\020\066\021\053\025\056\041\065" +
    "\043\060\044\061\001\002\000\030\004\057\005\062\006" +
    "\054\007\055\010\063\020\066\021\053\025\056\041\065" +
    "\043\060\044\061\001\002\000\030\004\057\005\062\006" +
    "\054\007\055\010\063\020\066\021\053\025\056\041\065" +
    "\043\060\044\061\001\002\000\030\004\057\005\062\006" +
    "\054\007\055\010\063\020\066\021\053\025\056\041\065" +
    "\043\060\044\061\001\002\000\030\004\057\005\062\006" +
    "\054\007\055\010\063\020\066\021\053\025\056\041\065" +
    "\043\060\044\061\001\002\000\030\004\057\005\062\006" +
    "\054\007\055\010\063\020\066\021\053\025\056\041\065" +
    "\043\060\044\061\001\002\000\030\004\057\005\062\006" +
    "\054\007\055\010\063\020\066\021\053\025\056\041\065" +
    "\043\060\044\061\001\002\000\030\004\057\005\062\006" +
    "\054\007\055\010\063\020\066\021\053\025\056\041\065" +
    "\043\060\044\061\001\002\000\072\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1\051\ufff1" +
    "\054\ufff1\055\ufff1\056\ufff1\062\ufff1\066\ufff1\067\ufff1\001" +
    "\002\000\030\004\057\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\025\056\041\065\043\060\044\061\001" +
    "\002\000\030\004\057\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\025\056\041\065\043\060\044\061\001" +
    "\002\000\030\004\057\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\025\056\041\065\043\060\044\061\001" +
    "\002\000\030\004\057\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\025\056\041\065\043\060\044\061\001" +
    "\002\000\030\004\057\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\025\056\041\065\043\060\044\061\001" +
    "\002\000\030\004\057\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\025\056\041\065\043\060\044\061\001" +
    "\002\000\030\004\057\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\025\056\041\065\043\060\044\061\001" +
    "\002\000\072\015\uffe9\016\104\017\uffe9\020\107\022\uffe9" +
    "\023\uffe9\024\uffe9\025\100\026\uffe9\027\103\030\074\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\036\105\037\076\040\077" +
    "\042\uffe9\043\102\044\101\051\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\062\uffe9\066\uffe9\067\uffe9\001\002\000\072\015\uffe5" +
    "\016\104\017\uffe5\020\107\022\uffe5\023\uffe5\024\uffe5\025" +
    "\100\026\072\027\103\030\074\031\106\032\073\033\111" +
    "\034\075\036\105\037\076\040\077\042\uffe5\043\102\044" +
    "\101\051\uffe5\054\uffe5\055\uffe5\056\uffe5\062\uffe5\066\uffe5" +
    "\067\uffe5\001\002\000\044\016\104\020\107\022\115\025" +
    "\100\026\072\027\103\030\074\031\106\032\073\033\111" +
    "\034\075\036\105\037\076\040\077\042\110\043\102\044" +
    "\101\001\002\000\072\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\042\uffe4\043\uffe4\044\uffe4\051\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\062\uffe4\066\uffe4\067\uffe4\001\002\000\072" +
    "\015\uffea\016\104\017\uffea\020\107\022\uffea\023\uffea\024" +
    "\uffea\025\100\026\uffea\027\103\030\074\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\036\105\037\076\040\077\042\uffea\043" +
    "\102\044\101\051\uffea\054\uffea\055\uffea\056\uffea\062\uffea" +
    "\066\uffea\067\uffea\001\002\000\072\015\ufff0\016\104\017" +
    "\ufff0\020\107\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\042\ufff0\043\102\044\ufff0\051\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\062\ufff0\066\ufff0\067\ufff0\001" +
    "\002\000\072\015\uffe3\016\uffe3\017\uffe3\020\107\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\051\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\062\uffe3\066\uffe3\067\uffe3\001\002\000\072\015\uffef" +
    "\016\104\017\uffef\020\107\022\uffef\023\uffef\024\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\036\uffef\037\uffef\040\uffef\042\uffef\043\102\044" +
    "\uffef\051\uffef\054\uffef\055\uffef\056\uffef\062\uffef\066\uffef" +
    "\067\uffef\001\002\000\072\015\uffed\016\104\017\uffed\020" +
    "\107\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\103" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\036\105\037" +
    "\076\040\uffed\042\uffed\043\102\044\uffed\051\uffed\054\uffed" +
    "\055\uffed\056\uffed\062\uffed\066\uffed\067\uffed\001\002\000" +
    "\072\015\uffee\016\104\017\uffee\020\107\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\103\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\036\105\037\076\040\uffee\042\uffee" +
    "\043\102\044\uffee\051\uffee\054\uffee\055\uffee\056\uffee\062" +
    "\uffee\066\uffee\067\uffee\001\002\000\066\015\uffeb\016\104" +
    "\017\uffeb\020\107\022\uffeb\023\uffeb\024\uffeb\025\100\026" +
    "\uffeb\027\103\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\105" +
    "\037\076\042\uffeb\043\102\044\101\051\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\062\uffeb\066\uffeb\067\uffeb\001\002\000\072" +
    "\015\uffde\016\104\017\uffde\020\107\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043" +
    "\102\044\uffde\051\uffde\054\uffde\055\uffde\056\uffde\062\uffde" +
    "\066\uffde\067\uffde\001\002\000\072\015\uffe7\016\104\017" +
    "\uffe7\020\107\022\uffe7\023\uffe7\024\uffe7\025\100\026\uffe7" +
    "\027\103\030\074\031\uffe7\032\uffe7\033\uffe7\034\uffe7\036" +
    "\105\037\076\040\077\042\uffe7\043\102\044\101\051\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\062\uffe7\066\uffe7\067\uffe7\001" +
    "\002\000\066\015\uffec\016\104\017\uffec\020\107\022\uffec" +
    "\023\uffec\024\uffec\025\100\026\uffec\027\103\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\036\105\037\076\042\uffec\043\102" +
    "\044\101\051\uffec\054\uffec\055\uffec\056\uffec\062\uffec\066" +
    "\uffec\067\uffec\001\002\000\072\015\uffe8\016\104\017\uffe8" +
    "\020\107\022\uffe8\023\uffe8\024\uffe8\025\100\026\uffe8\027" +
    "\103\030\074\031\uffe8\032\uffe8\033\uffe8\034\uffe8\036\105" +
    "\037\076\040\077\042\uffe8\043\102\044\101\051\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\062\uffe8\066\uffe8\067\uffe8\001\002" +
    "\000\072\015\uffe6\016\104\017\uffe6\020\107\022\uffe6\023" +
    "\uffe6\024\uffe6\025\100\026\uffe6\027\103\030\074\031\106" +
    "\032\073\033\111\034\075\036\105\037\076\040\077\042" +
    "\uffe6\043\102\044\101\051\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\062\uffe6\066\uffe6\067\uffe6\001\002\000\030\004\057\005" +
    "\062\006\054\007\055\010\063\020\066\021\053\025\056" +
    "\041\065\043\060\044\061\001\002\000\044\016\104\020" +
    "\107\022\134\025\100\026\072\027\103\030\074\031\106" +
    "\032\073\033\111\034\075\036\105\037\076\040\077\042" +
    "\110\043\102\044\101\001\002\000\004\062\135\001\002" +
    "\000\026\010\034\011\024\012\036\013\022\021\023\043" +
    "\031\050\025\065\026\074\035\076\027\001\002\000\012" +
    "\022\uffc9\023\uffc9\024\uffc9\056\uffc9\001\002\000\072\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\051\uffe2\054\uffe2\055\uffe2\056\uffe2\062\uffe2\066" +
    "\uffe2\067\uffe2\001\002\000\032\004\057\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\023\uffff\025\056\041" +
    "\065\043\060\044\061\001\002\000\004\023\146\001\002" +
    "\000\046\015\144\016\104\020\107\023\uffdb\025\100\026" +
    "\072\027\103\030\074\031\106\032\073\033\111\034\075" +
    "\036\105\037\076\040\077\042\110\043\102\044\101\001" +
    "\002\000\004\023\uffdc\001\002\000\032\004\057\005\062" +
    "\006\054\007\055\010\063\020\066\021\053\023\uffff\025" +
    "\056\041\065\043\060\044\061\001\002\000\004\023\uffda" +
    "\001\002\000\072\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\051\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\062\uffdd\066\uffdd\067\uffdd\001\002\000\072\015" +
    "\ufff3\016\104\017\ufff3\020\107\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\103\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\036\105\037\076\040\ufff3\042\ufff3\043\102" +
    "\044\ufff3\051\ufff3\054\ufff3\055\ufff3\056\ufff3\062\ufff3\066" +
    "\ufff3\067\ufff3\001\002\000\072\015\ufff5\016\104\017\ufff5" +
    "\020\107\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\042\ufff5\043\ufff5\044\ufff5\051\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\062\ufff5\066\ufff5\067\ufff5\001\002" +
    "\000\072\015\ufff4\016\104\017\ufff4\020\107\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\103\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\036\105\037\076\040\ufff4\042" +
    "\ufff4\043\102\044\ufff4\051\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\062\ufff4\066\ufff4\067\ufff4\001\002\000\044\016\104\020" +
    "\107\023\153\025\100\026\072\027\103\030\074\031\106" +
    "\032\073\033\111\034\075\036\105\037\076\040\077\042" +
    "\110\043\102\044\101\001\002\000\072\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\051" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\062\uffe0\066\uffe0\067\uffe0" +
    "\001\002\000\004\023\155\001\002\000\012\022\uffcc\023" +
    "\uffcc\024\uffcc\056\uffcc\001\002\000\012\052\uffd6\060\uffd6" +
    "\063\uffd6\071\uffd6\001\002\000\004\010\044\001\002\000" +
    "\010\052\uffc5\060\uffc5\063\uffc5\001\002\000\010\052\uffff" +
    "\060\167\063\164\001\002\000\010\052\uffff\060\167\063" +
    "\164\001\002\000\004\052\uffc0\001\002\000\004\010\271" +
    "\001\002\000\010\052\uffff\060\167\063\164\001\002\000" +
    "\004\052\264\001\002\000\004\010\170\001\002\000\004" +
    "\021\171\001\002\000\006\010\254\023\uffff\001\002\000" +
    "\004\014\173\001\002\000\026\010\034\011\024\012\036" +
    "\013\022\021\023\043\031\050\025\065\026\074\035\076" +
    "\027\001\002\000\004\024\175\001\002\000\016\052\uffff" +
    "\053\010\060\uffff\063\uffff\070\uffff\071\uffff\001\002\000" +
    "\014\052\uffff\060\uffff\063\uffff\070\015\071\uffff\001\002" +
    "\000\012\052\uffff\060\uffff\063\uffff\071\157\001\002\000" +
    "\010\052\uffff\060\167\063\164\001\002\000\004\052\202" +
    "\001\002\000\050\003\214\004\057\005\062\006\054\007" +
    "\055\010\063\020\066\021\053\025\056\041\065\043\060" +
    "\044\061\052\210\056\uffff\057\215\061\207\072\204\075" +
    "\213\077\205\001\002\000\006\024\250\056\uffb4\001\002" +
    "\000\030\004\057\005\062\006\054\007\055\010\063\020" +
    "\066\021\053\025\056\041\065\043\060\044\061\001\002" +
    "\000\004\010\244\001\002\000\004\056\242\001\002\000" +
    "\030\004\057\005\062\006\054\007\055\010\063\020\066" +
    "\021\053\025\056\041\065\043\060\044\061\001\002\000" +
    "\050\003\214\004\057\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\025\056\041\065\043\060\044\061\052" +
    "\210\056\uffff\057\215\061\207\072\204\075\213\077\205" +
    "\001\002\000\004\056\uffb5\001\002\000\052\016\104\020" +
    "\107\024\uffb0\025\100\026\072\027\103\030\074\031\106" +
    "\032\073\033\111\034\075\036\105\037\076\040\077\042" +
    "\110\043\102\044\101\051\231\055\uffb0\056\uffb0\001\002" +
    "\000\030\004\057\005\062\006\054\007\055\010\063\020" +
    "\066\021\053\025\056\041\065\043\060\044\061\001\002" +
    "\000\004\024\225\001\002\000\004\010\216\001\002\000" +
    "\004\051\217\001\002\000\030\004\057\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\025\056\041\065\043" +
    "\060\044\061\001\002\000\044\016\104\020\107\025\100" +
    "\026\072\027\103\030\074\031\106\032\073\033\111\034" +
    "\075\036\105\037\076\040\077\042\110\043\102\044\101" +
    "\067\221\001\002\000\030\004\057\005\062\006\054\007" +
    "\055\010\063\020\066\021\053\025\056\041\065\043\060" +
    "\044\061\001\002\000\044\016\104\020\107\025\100\026" +
    "\072\027\103\030\074\031\106\032\073\033\111\034\075" +
    "\036\105\037\076\040\077\042\110\043\102\044\101\054" +
    "\223\001\002\000\044\004\057\005\062\006\054\007\055" +
    "\010\063\020\066\021\053\025\056\041\065\043\060\044" +
    "\061\052\210\057\215\061\207\072\204\075\213\077\205" +
    "\001\002\000\010\024\uffab\055\uffab\056\uffab\001\002\000" +
    "\050\003\214\004\057\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\025\056\041\065\043\060\044\061\052" +
    "\210\056\uffff\057\215\061\207\072\204\075\213\077\205" +
    "\001\002\000\004\056\uffb2\001\002\000\044\016\104\020" +
    "\107\025\100\026\072\027\103\030\074\031\106\032\073" +
    "\033\111\034\075\036\105\037\076\040\077\042\110\043" +
    "\102\044\101\062\230\001\002\000\010\024\uffaa\055\uffaa" +
    "\056\uffaa\001\002\000\030\004\057\005\062\006\054\007" +
    "\055\010\063\020\066\021\053\025\056\041\065\043\060" +
    "\044\061\001\002\000\050\016\104\020\107\024\uffaf\025" +
    "\100\026\072\027\103\030\074\031\106\032\073\033\111" +
    "\034\075\036\105\037\076\040\077\042\110\043\102\044" +
    "\101\055\uffaf\056\uffaf\001\002\000\004\056\234\001\002" +
    "\000\010\024\uffb1\055\uffb1\056\uffb1\001\002\000\044\016" +
    "\104\020\107\025\100\026\072\027\103\030\074\031\106" +
    "\032\073\033\111\034\075\036\105\037\076\040\077\042" +
    "\110\043\102\044\101\066\236\001\002\000\044\004\057" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\056\041\065\043\060\044\061\052\210\057\215\061\207" +
    "\072\204\075\213\077\205\001\002\000\010\024\uffae\055" +
    "\240\056\uffae\001\002\000\044\004\057\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\025\056\041\065\043" +
    "\060\044\061\052\210\057\215\061\207\072\204\075\213" +
    "\077\205\001\002\000\010\024\uffad\055\uffad\056\uffad\001" +
    "\002\000\004\024\243\001\002\000\010\052\uffbd\060\uffbd" +
    "\063\uffbd\001\002\000\010\024\uffa9\055\uffa9\056\uffa9\001" +
    "\002\000\044\016\104\020\107\025\100\026\072\027\103" +
    "\030\074\031\106\032\073\033\111\034\075\036\105\037" +
    "\076\040\077\042\110\043\102\044\101\054\246\001\002" +
    "\000\044\004\057\005\062\006\054\007\055\010\063\020" +
    "\066\021\053\025\056\041\065\043\060\044\061\052\210" +
    "\057\215\061\207\072\204\075\213\077\205\001\002\000" +
    "\010\024\uffac\055\uffac\056\uffac\001\002\000\050\003\214" +
    "\004\057\005\062\006\054\007\055\010\063\020\066\021" +
    "\053\025\056\041\065\043\060\044\061\052\210\056\uffff" +
    "\057\215\061\207\072\204\075\213\077\205\001\002\000" +
    "\004\056\uffb3\001\002\000\004\023\uffba\001\002\000\006" +
    "\023\uffb9\024\261\001\002\000\004\014\257\001\002\000" +
    "\004\023\256\001\002\000\006\014\uffbb\024\uffbb\001\002" +
    "\000\026\010\034\011\024\012\036\013\022\021\023\043" +
    "\031\050\025\065\026\074\035\076\027\001\002\000\006" +
    "\023\uffb7\024\uffb7\001\002\000\006\010\254\023\uffff\001" +
    "\002\000\004\023\uffb8\001\002\000\004\002\000\001\002" +
    "\000\050\003\214\004\057\005\062\006\054\007\055\010" +
    "\063\020\066\021\053\025\056\041\065\043\060\044\061" +
    "\052\210\056\uffff\057\215\061\207\072\204\075\213\077" +
    "\205\001\002\000\004\056\266\001\002\000\004\016\267" +
    "\001\002\000\004\002\uffb6\001\002\000\004\052\uffbf\001" +
    "\002\000\004\021\171\001\002\000\004\024\273\001\002" +
    "\000\016\052\uffff\053\010\060\uffff\063\uffff\070\uffff\071" +
    "\uffff\001\002\000\014\052\uffff\060\uffff\063\uffff\070\015" +
    "\071\uffff\001\002\000\012\052\uffff\060\uffff\063\uffff\071" +
    "\157\001\002\000\010\052\uffff\060\167\063\164\001\002" +
    "\000\004\052\300\001\002\000\050\003\214\004\057\005" +
    "\062\006\054\007\055\010\063\020\066\021\053\025\056" +
    "\041\065\043\060\044\061\052\210\056\uffff\057\215\061" +
    "\207\072\204\075\213\077\205\001\002\000\004\056\302" +
    "\001\002\000\004\024\303\001\002\000\010\052\uffbc\060" +
    "\uffbc\063\uffbc\001\002\000\004\052\uffbe\001\002\000\010" +
    "\052\uffc4\060\uffc4\063\uffc4\001\002\000\004\024\307\001" +
    "\002\000\012\010\044\052\uffc3\060\uffc3\063\uffc3\001\002" +
    "\000\010\052\uffc2\060\uffc2\063\uffc2\001\002\000\016\010" +
    "\313\052\ufffc\060\ufffc\063\ufffc\070\ufffc\071\ufffc\001\002" +
    "\000\014\052\ufffd\060\ufffd\063\ufffd\070\ufffd\071\ufffd\001" +
    "\002\000\004\030\314\001\002\000\030\004\057\005\062" +
    "\006\054\007\055\010\063\020\066\021\053\025\056\041" +
    "\065\043\060\044\061\001\002\000\044\016\104\020\107" +
    "\024\316\025\100\026\072\027\103\030\074\031\106\032" +
    "\073\033\111\034\075\036\105\037\076\040\077\042\110" +
    "\043\102\044\101\001\002\000\016\010\ufffa\052\ufffa\060" +
    "\ufffa\063\ufffa\070\ufffa\071\ufffa\001\002\000\014\052\ufffb" +
    "\060\ufffb\063\ufffb\070\ufffb\071\ufffb\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\011\043\010" +
    "\001\001\000\006\011\311\012\310\001\001\000\002\001" +
    "\001\000\006\005\013\043\012\001\001\000\002\001\001" +
    "\000\006\006\160\043\157\001\001\000\006\014\015\015" +
    "\016\001\001\000\002\001\001\000\006\014\155\015\016" +
    "\001\001\000\002\001\001\000\010\016\032\021\027\022" +
    "\031\001\001\000\002\001\001\000\010\016\153\021\037" +
    "\022\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\042\040\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\040\021\037\022\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\045\021\037\022\031\001" +
    "\001\000\002\001\001\000\006\020\042\040\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\063\001" +
    "\001\000\004\013\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\150\001\001\000\002\001\001\000" +
    "\004\013\147\001\001\000\004\013\146\001\001\000\002" +
    "\001\001\000\004\026\136\001\001\000\002\001\001\000" +
    "\004\013\070\001\001\000\010\016\066\021\037\022\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\130\001\001\000\004\013\127\001\001" +
    "\000\004\013\126\001\001\000\004\013\125\001\001\000" +
    "\004\013\124\001\001\000\004\013\123\001\001\000\004" +
    "\013\122\001\001\000\004\013\121\001\001\000\002\001" +
    "\001\000\004\013\120\001\001\000\004\013\117\001\001" +
    "\000\004\013\116\001\001\000\004\013\115\001\001\000" +
    "\004\013\113\001\001\000\004\013\112\001\001\000\004" +
    "\013\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\135\021\037\022\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\141" +
    "\027\140\043\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\141\027\144\043\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\304\020\305\001\001\000\002" +
    "\001\001\000\012\007\165\023\164\024\161\043\162\001" +
    "\001\000\012\007\303\023\164\024\161\043\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\267\023" +
    "\164\024\161\043\162\001\001\000\004\010\262\001\001" +
    "\000\002\001\001\000\004\025\171\001\001\000\010\030" +
    "\254\031\252\043\251\001\001\000\002\001\001\000\010" +
    "\016\173\021\037\022\031\001\001\000\002\001\001\000" +
    "\006\004\175\043\010\001\001\000\006\005\176\043\012" +
    "\001\001\000\006\006\177\043\157\001\001\000\012\007" +
    "\200\023\164\024\161\043\162\001\001\000\002\001\001" +
    "\000\012\013\211\032\202\033\205\043\210\001\001\000" +
    "\002\001\001\000\004\013\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\234\001\001\000\012\013" +
    "\211\032\202\033\232\043\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\217" +
    "\001\001\000\002\001\001\000\004\013\221\001\001\000" +
    "\002\001\001\000\006\013\211\032\223\001\001\000\002" +
    "\001\001\000\012\013\211\032\202\033\225\043\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\211" +
    "\032\236\001\001\000\002\001\001\000\006\013\211\032" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\211\032\246\001\001\000\002\001\001\000\012\013\211" +
    "\032\202\033\250\043\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\257\021\037\022" +
    "\031\001\001\000\002\001\001\000\010\030\261\031\252" +
    "\043\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\211\032\202\033\264\043\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\271\001\001\000\002\001\001\000\006" +
    "\004\273\043\010\001\001\000\006\005\274\043\012\001" +
    "\001\000\006\006\275\043\157\001\001\000\012\007\276" +
    "\023\164\024\161\043\162\001\001\000\002\001\001\000" +
    "\012\013\211\032\202\033\300\043\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\307" +
    "\020\305\001\001\000\002\001\001\000\006\011\316\012" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }
        

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // labeldef ::= IDENTIFIER SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("labeldef",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // labeldefs ::= labeldef labeldefs 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("labeldefs",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // labeldefs ::= labeldef 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("labeldefs",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // labeldec_opt_ ::= LABEL labeldefs 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("labeldec_opt_",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // labeldec_opt_ ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("labeldec_opt_",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // extended_opt_ ::= EXTENDED 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("extended_opt_",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // extended_opt_ ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("extended_opt_",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_ ::= value COLON statements_opt 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("case_",32, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cases_opt ::= case_ cases_opt 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("cases_opt",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cases_opt ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("cases_opt",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement ::= GOTO IDENTIFIER 
            {
              AbsTree RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= CASE value OF 
            {
              AbsTree RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= FOR IDENTIFIER ASSIGN value TO value DO statement 
            {
              AbsTree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsTree lo = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree hi = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree stmt = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsForStmt((AbsValName)(new AbsValName(id)).setPos(id,idleft,idright), (AbsValExpr)lo, (AbsValExpr)hi, (AbsStmt)stmt)).setBeg(f,fleft,fright).setEnd(stmt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= WHILE value DO statement 
            {
              AbsTree RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree cond = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree stmt = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsWhileStmt((AbsValExpr)cond, (AbsStmt)stmt)).setBeg(w,wleft,wright).setEnd(stmt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= IF value THEN statement ELSE statement 
            {
              AbsTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsTree cond = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree stmt = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int stmtelseleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int stmtelseright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree stmtelse = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsIfStmt((AbsValExpr)cond, (AbsStmt)stmt, (AbsStmt)stmtelse)).setBeg(i,ileft,iright).setEnd(stmtelse); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= IF value THEN statement 
            {
              AbsTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree cond = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree stmt = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 
            RESULT = 
                (new AbsIfStmt(
                    (AbsValExpr)cond, 
                    (AbsStmt)stmt, 
                    (AbsBlockStmt)(new AbsBlockStmt((AbsStmts)(new AbsStmts()).setPos("",stmt.endLine,stmt.endColumn))).setPos("",stmt.endLine,stmt.endColumn)
                )).setBeg(i,ileft,iright).setEnd(stmt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= value ASSIGN value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsAssignStmt((AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= value 
            {
              AbsTree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsExprStmt((AbsValExpr)v)).setPos(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= BEGIN statements_opt END 
            {
              AbsTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree stmts = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBlockStmt((AbsStmts)stmts)).setBeg(b,bleft,bright).setEnd(e,eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statements_opt ::= error SEMIC statements_opt 
            {
              AbsTree RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree stmts = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (AbsStmts)stmts; RESULT.error = true; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statements_opt",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statements_opt ::= statement SEMIC statements_opt 
            {
              AbsTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree stmt = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree stmts = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 ((AbsStmts)stmts).stmts.add(0,(AbsStmt)stmt); RESULT = stmts.setBeg(stmt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statements_opt",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statements_opt ::= statement 
            {
              AbsTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree stmt = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsStmts((AbsStmt)stmt)).setPos(stmt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statements_opt",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statements_opt ::= eps 
            {
              AbsTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsStmts()).setPos("",eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statements_opt",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // main_block ::= BEGIN statements_opt END DOT 
            {
              AbsTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree stmts = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = (new AbsBlockStmt((AbsStmts)stmts)).setBeg(b,bleft,bright).setEnd(e,eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("main_block",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var_declaration2 ::= IDENTIFIER COLON type 
            {
              AbsTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree t = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsVarDecl((AbsDeclName)(new AbsDeclName(id)).setPos(id,idleft,idright), (AbsTypeExpr)t)).setBeg(id,idleft,idright).setEnd(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declaration2",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // var_declarations2 ::= var_declaration2 SEMIC var_declarations2 
            {
              AbsTree RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree var = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree pars = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 ((AbsDecls)pars).decls.add(0,(AbsDecl)var); RESULT = pars.setBeg(var); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations2",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var_declarations2 ::= var_declaration2 
            {
              AbsTree RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree var = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsDecls((AbsDecl)var)).setPos(var); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations2",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var_declarations2 ::= eps 
            {
              AbsTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsDecls()).setPos("",eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations2",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parameters ::= LPARENTHESIS var_declarations2 RPARENTHESIS 
            {
              AbsTree RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree pars = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = (AbsDecls)pars; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // proc ::= PROCEDURE IDENTIFIER parameters SEMIC constdec_opt typedec_opt vardec_opt funcproc_opt BEGIN statements_opt END SEMIC 
            {
              AbsTree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-11)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-10)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-9)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-9)).right;
		AbsTree pars = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-9)).value;
		int cdeclsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int cdeclsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		AbsTree cdecls = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int tdeclsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int tdeclsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		AbsTree tdecls = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int vdeclsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int vdeclsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsTree vdecls = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int fpdeclsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int fpdeclsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsTree fpdecls = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree stmts = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 
            AbsDecls decls = (AbsDecls)(new AbsDecls()).setBeg(cdecls).setEnd(fpdecls);
            decls.decls.addAll(((AbsDecls)cdecls).decls);
            decls.decls.addAll(((AbsDecls)tdecls).decls);
            decls.decls.addAll(((AbsDecls)vdecls).decls);
            decls.decls.addAll(((AbsDecls)fpdecls).decls);
            
            RESULT = 
                (new AbsProcDecl(
                    (AbsDeclName)(new AbsDeclName(id)).setPos(id,idleft,idright),
                    (AbsDecls)pars, decls, 
                    (AbsBlockStmt)(new AbsBlockStmt((AbsStmts)stmts)).setBeg(b,bleft,bright).setEnd(e,eleft,eright))
                ).setBeg(f,fleft,fright).setEnd(e,eleft,eright);
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("proc",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-11)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // func ::= FUNCTION IDENTIFIER parameters COLON type SEMIC constdec_opt typedec_opt vardec_opt funcproc_opt BEGIN statements_opt END SEMIC 
            {
              AbsTree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-13)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-13)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-12)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-11)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-11)).right;
		AbsTree pars = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-9)).right;
		AbsTree t = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-9)).value;
		int cdeclsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int cdeclsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		AbsTree cdecls = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int tdeclsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int tdeclsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		AbsTree tdecls = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int vdeclsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int vdeclsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsTree vdecls = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int fpdeclsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int fpdeclsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsTree fpdecls = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree stmts = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 
            AbsDecls decls = (AbsDecls)(new AbsDecls()).setBeg(cdecls).setEnd(fpdecls);
            decls.decls.addAll(((AbsDecls)cdecls).decls);
            decls.decls.addAll(((AbsDecls)tdecls).decls);
            decls.decls.addAll(((AbsDecls)vdecls).decls);
            decls.decls.addAll(((AbsDecls)fpdecls).decls);
            
            RESULT = 
                (new AbsFunDecl(
                    (AbsDeclName)(new AbsDeclName(id)).setPos(id,idleft,idright),
                    (AbsDecls)pars, (AbsTypeExpr)t, decls, 
                    (AbsBlockStmt)(new AbsBlockStmt((AbsStmts)stmts)).setBeg(b,bleft,bright).setEnd(e,eleft,eright))
                ).setBeg(f,fleft,fright).setEnd(e,eleft,eright);
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("func",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-13)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funcproc_opt ::= proc funcproc_opt 
            {
              AbsTree RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree proc = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree fp = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 ((AbsDecls)fp).decls.add(0,(AbsProcDecl)proc); RESULT = fp.setBeg(proc); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("funcproc_opt",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funcproc_opt ::= func funcproc_opt 
            {
              AbsTree RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree func = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree fp = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 ((AbsDecls)fp).decls.add(0,(AbsFunDecl)func); RESULT = fp.setBeg(func); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("funcproc_opt",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funcproc_opt ::= eps 
            {
              AbsTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsDecls()).setPos("", eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("funcproc_opt",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_declaration ::= IDENTIFIER COLON type 
            {
              AbsTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree t = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsVarDecl((AbsDeclName)(new AbsDeclName(id)).setPos(id,idleft,idright), (AbsTypeExpr)t)).setBeg(id,idleft,idright).setEnd(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declaration",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var_declarations ::= var_declaration SEMIC var_declarations 
            {
              AbsTree RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree var = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree vars = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 ((AbsDecls)vars).decls.add(0,(AbsVarDecl)var); RESULT = vars.setBeg(var); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // var_declarations ::= var_declaration SEMIC 
            {
              AbsTree RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree var = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = (new AbsDecls((AbsVarDecl)var)).setPos(var); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // vardec_opt ::= VAR var_declarations 
            {
              AbsTree RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree vars = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (AbsDecls)vars; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vardec_opt",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vardec_opt ::= eps 
            {
              AbsTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsDecls()).setPos("",eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vardec_opt",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var_declarations_record ::= var_declaration SEMIC var_declarations_record 
            {
              AbsTree RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree var = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree vars = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 ((AbsDecls)vars).decls.add(0,(AbsVarDecl)var); RESULT = vars.setBeg(var); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations_record",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var_declarations_record ::= var_declaration 
            {
              AbsTree RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree var = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsDecls((AbsVarDecl)var)).setPos(var); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_declarations_record",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // record ::= RECORD var_declarations_record END 
            {
              AbsTree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree vars = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsRecordType((AbsDecls)vars)).setBeg(r,rleft,rright).setEnd(e,eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // array ::= ARRAY LBRACKET value DOTS value RBRACKET OF type 
            {
              AbsTree RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree t = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsArrayType((AbsTypeExpr)t, (AbsValExpr)v1, (AbsValExpr)v2)).setBeg(arr,arrleft,arrright).setEnd(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("array",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= LABEL 
            {
              AbsTree RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= IDENTIFIER 
            {
              AbsTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsTypeName(id)).setPos(id,idleft,idright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= LPARENTHESIS type RPARENTHESIS 
            {
              AbsTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree t = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = (AbsTypeExpr)t; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= PTR type 
            {
              AbsTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree t = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsPointerType((AbsTypeExpr)t)).setBeg(p,pleft,pright).setEnd(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= array 
            {
              AbsTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree a = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (AbsArrayType)a; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= record 
            {
              AbsTree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree r = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (AbsRecordType)r; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= AUTO 
            {
              AbsTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= INT 
            {
              AbsTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsAtomType(AbsAtomType.INT)).setPos(t,tleft,tright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= CHAR 
            {
              AbsTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsAtomType(AbsAtomType.CHAR)).setPos(t,tleft,tright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= BOOL 
            {
              AbsTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsAtomType(AbsAtomType.BOOL)).setPos(t,tleft,tright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_declaration ::= IDENTIFIER EQU record 
            {
              AbsTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree r = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsTypeDecl((AbsDeclName)(new AbsDeclName(id)).setPos(id,idleft,idright), (AbsRecordType)r)).setBeg(id,idleft,idright).setEnd(r); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declaration",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_declaration ::= IDENTIFIER EQU type SEMIC 
            {
              AbsTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree t = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = (new AbsTypeDecl((AbsDeclName)(new AbsDeclName(id)).setPos(id,idleft,idright), (AbsTypeExpr)t)).setBeg(id,idleft,idright).setEnd(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declaration",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_declarations ::= type_declaration type_declarations 
            {
              AbsTree RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree td = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree tds = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 ((AbsDecls)tds).decls.add(0,(AbsDecl)td); RESULT = tds.setBeg(td); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_declarations ::= type_declaration 
            {
              AbsTree RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree td = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsDecls((AbsTypeDecl)td)).setPos(td); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typedec_opt ::= TYPE type_declarations 
            {
              AbsTree RESULT =null;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree tds = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (AbsDecls)tds; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("typedec_opt",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typedec_opt ::= eps 
            {
              AbsTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsDecls()).setPos("", eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("typedec_opt",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value_list ::= value COMMA value_list 
            {
              AbsTree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree vals = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 ((AbsValExprs)vals).exprs.add(0,(AbsValExpr)v); RESULT = vals.setBeg(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value_list ::= value 
            {
              AbsTree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsValExprs((AbsValExpr)v)).setPos(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value_list ::= eps 
            {
              AbsTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsValExprs()).setPos("",eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameters_call ::= LPARENTHESIS value_list RPARENTHESIS 
            {
              AbsTree RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree vals = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = (AbsValExprs)vals; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters_call",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= value MOD value 
            {
              AbsTree RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= IDENTIFIER 
            {
              AbsTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsValName(id)).setPos(id,idleft,idright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= LPARENTHESIS value RPARENTHESIS 
            {
              AbsTree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree v = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = (AbsValExpr)v; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= LBRACKET type RBRACKET 
            {
              AbsTree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree t = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsAlloc((AbsTypeExpr)t)).setBeg(l,lleft,lright).setEnd(r,rleft,rright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // value ::= IDENTIFIER parameters_call 
            {
              AbsTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree vals = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsCallExpr((AbsValName)(new AbsValName(id)).setPos(id,idleft,idright), (AbsValExprs)vals)).setBeg(id,idleft,idright).setEnd(vals); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // value ::= value DOT value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.RECACCESS, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // value ::= value LBRACKET value RBRACKET 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.ARRACCESS, (AbsValExpr)v1, (AbsValExpr)v2)).setBeg(v1).setEnd(c,cleft,cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // value ::= value OR value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.OR,  (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= value AND value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.AND, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= value LTH value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.LTH, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // value ::= value GTH value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.GTH, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // value ::= value LEQ value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.LEQ, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // value ::= value GEQ value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.GEQ, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // value ::= value NEQ value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.NEQ, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // value ::= value EQU value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.EQU, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // value ::= value SUB value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.SUB, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // value ::= value ADD value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.ADD, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // value ::= value DIV value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.DIV, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value ::= value MUL value 
            {
              AbsTree RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree v1 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v2 = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsBinExpr(AbsBinExpr.MUL, (AbsValExpr)v1, (AbsValExpr)v2)).setBegEnd(v1,v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // value ::= value PTR 
            {
              AbsTree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree v = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsUnExpr(AbsUnExpr.VAL, (AbsValExpr)v)).setBeg(v).setEnd(c,cleft,cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value ::= NOT value 
            {
              AbsTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsUnExpr(AbsUnExpr.NOT, (AbsValExpr)v)).setBeg(c,cleft,cright).setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value ::= SUB value 
            {
              AbsTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsUnExpr(AbsUnExpr.SUB, (AbsValExpr)v)).setBeg(c,cleft,cright).setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // value ::= ADD value 
            {
              AbsTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsUnExpr(AbsUnExpr.ADD, (AbsValExpr)v)).setBeg(c,cleft,cright).setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // value ::= PTR value 
            {
              AbsTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree v = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsUnExpr(AbsUnExpr.MEM, (AbsValExpr)v)).setBeg(c,cleft,cright).setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // value ::= NIL 
            {
              AbsTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsNilConst()).setPos(c,cleft,cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // value ::= INT_CONST 
            {
              AbsTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsAtomConst(c, AbsAtomConst.INT)).setPos(c, cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // value ::= CHAR_CONST 
            {
              AbsTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsAtomConst(c, AbsAtomConst.CHAR)).setPos(c, cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // value ::= BOOL_CONST 
            {
              AbsTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsAtomConst(c, AbsAtomConst.BOOL)).setPos(c, cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_declaration ::= IDENTIFIER EQU value SEMIC 
            {
              AbsTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree val = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = (new AbsConstDecl((AbsDeclName)(new AbsDeclName(id)).setPos(id,idleft,idright), (AbsValExpr)val)).setBeg(id, idleft, idright).setEnd(val); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_declaration",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declarations ::= const_declaration const_declarations 
            {
              AbsTree RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree cd = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cdsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cdsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree cds = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 ((AbsDecls)cds).decls.add(0,(AbsDecl)cd); RESULT = cds.setBeg(cd); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_declarations",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_declarations ::= const_declaration 
            {
              AbsTree RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree cd = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsDecls((AbsDecl)cd)).setPos((AbsDecl)cd); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_declarations",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constdec_opt ::= CONST const_declarations 
            {
              AbsTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree p = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = p; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constdec_opt",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constdec_opt ::= eps 
            {
              AbsTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = (new AbsDecls()).setPos("",eleft,eright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constdec_opt",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // eps ::= 
            {
              String RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("eps",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= PROGRAM IDENTIFIER SEMIC constdec_opt typedec_opt vardec_opt funcproc_opt main_block 
            {
              AbsTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsTree consts = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsTree types = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsTree vars = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int funprocsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int funprocsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree funprocs = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int mainblockleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int mainblockright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTree mainblock = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 
        AbsDecls decls = (AbsDecls)(new AbsDecls()).setBeg(consts).setEnd(funprocs);
        decls.decls.addAll(((AbsDecls)consts).decls);
        decls.decls.addAll(((AbsDecls)types).decls);
        decls.decls.addAll(((AbsDecls)vars).decls);
        decls.decls.addAll(((AbsDecls)funprocs).decls);
        
        System.out.println(decls.decls.size());
        
        RESULT = (new AbsProgram((AbsDeclName)(new AbsDeclName(p)).setPos(p,pleft,pright), decls, (AbsBlockStmt)mainblock)).setBeg(b,bleft,bright).setEnd(mainblock); 
    
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree start_val = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

