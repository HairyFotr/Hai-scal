/* The following code was generated by JFlex 1.4.3 on 11/05/12 10:32 */

package compiler.lexanal;

import java.io.*;

import compiler.report.*;
import compiler.synanal.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/05/12 10:32 from the specification file
 * <tt>pascal/src/compiler/lexanal/pascal.jflex</tt>
 */
public class PascalLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\25\0\1\4\3\0\1\6\2\0\1\5\1\51"+
    "\1\52\1\54\1\55\1\47\1\56\1\41\1\30\12\33\1\46\1\64"+
    "\1\61\1\57\1\60\2\0\3\44\1\13\1\7\10\44\1\12\5\44"+
    "\1\11\3\44\1\10\2\44\1\50\1\0\1\53\1\63\1\45\1\0"+
    "\1\14\1\25\1\20\1\27\1\22\1\32\1\23\1\36\1\35\2\44"+
    "\1\24\1\26\1\34\1\17\1\42\1\44\1\31\1\21\1\16\1\15"+
    "\1\37\1\43\1\44\1\40\1\44\1\1\1\62\1\2\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\13\4\1\1\2\4"+
    "\1\5\3\4\1\6\2\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\3\1\26\1\27\3\0\3\4"+
    "\1\30\3\4\1\23\1\31\12\4\1\32\1\4\1\0"+
    "\6\4\1\33\2\4\1\34\2\4\1\35\1\36\1\37"+
    "\1\40\1\0\1\41\2\4\1\42\7\4\1\43\4\4"+
    "\1\44\1\45\3\4\1\46\1\47\1\50\1\4\1\51"+
    "\2\4\1\0\1\52\1\4\1\53\1\54\1\55\1\56"+
    "\1\4\1\57\1\60\1\61\11\4\1\0\1\62\1\63"+
    "\1\64\1\4\1\65\5\4\1\66\1\0\1\4\1\67"+
    "\4\4\1\0\1\70\1\4\1\71\1\4\1\72\1\0"+
    "\1\73\1\4\1\0\1\74\1\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\u05cc\0\u0601\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\u0636\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\u013e\0\u0774\0\u07a9\0\u07de\0\u013e"+
    "\0\u013e\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u013e\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u013e\0\u0bcd\0\u0c02\0\152"+
    "\0\u0c37\0\u0c6c\0\152\0\152\0\152\0\152\0\u0ca1\0\152"+
    "\0\u0cd6\0\u0d0b\0\u013e\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\u0e7e\0\u013e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u013e"+
    "\0\u013e\0\u0f87\0\u0fbc\0\u0ff1\0\u013e\0\u013e\0\u013e\0\u1026"+
    "\0\u013e\0\u105b\0\u1090\0\u10c5\0\u013e\0\u10fa\0\u013e\0\u013e"+
    "\0\u013e\0\u013e\0\u112f\0\u013e\0\u013e\0\u013e\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u013e\0\u013e\0\u013e\0\u1376\0\u013e\0\u13ab\0\u13e0\0\u1415"+
    "\0\u144a\0\u147f\0\u013e\0\u14b4\0\u14e9\0\u013e\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\u15f2\0\u013e\0\u1627\0\u013e\0\u165c\0\u013e"+
    "\0\u1691\0\u013e\0\u16c6\0\u16fb\0\u013e\0\u1730\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\2\5\1\6\1\3\5\7\1\10"+
    "\1\7\1\11\1\12\1\13\1\7\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\7\1\30\1\7\1\31\1\32\1\33\1\7"+
    "\1\3\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\62\53\73\0\1\56\61\0\2\5"+
    "\60\0\5\57\1\60\57\57\7\0\21\7\1\0\10\7"+
    "\1\0\4\7\26\0\6\7\1\61\12\7\1\0\1\62"+
    "\2\7\1\63\4\7\1\0\4\7\26\0\10\7\1\64"+
    "\10\7\1\0\1\65\4\7\1\66\1\7\1\67\1\0"+
    "\4\7\26\0\21\7\1\0\1\70\1\71\6\7\1\0"+
    "\4\7\26\0\5\7\1\72\2\7\1\73\10\7\1\0"+
    "\5\7\1\74\2\7\1\0\4\7\26\0\15\7\1\75"+
    "\3\7\1\0\3\7\1\76\4\7\1\0\4\7\26\0"+
    "\10\7\1\77\10\7\1\0\10\7\1\0\4\7\26\0"+
    "\5\7\1\100\13\7\1\0\10\7\1\0\4\7\26\0"+
    "\10\7\1\101\2\7\1\102\5\7\1\0\10\7\1\0"+
    "\4\7\26\0\10\7\1\103\10\7\1\0\10\7\1\0"+
    "\4\7\26\0\10\7\1\104\10\7\1\0\4\7\1\105"+
    "\3\7\1\0\4\7\47\0\1\106\43\0\13\7\1\107"+
    "\5\7\1\0\10\7\1\0\4\7\26\0\5\7\1\110"+
    "\1\111\1\7\1\112\10\7\1\0\10\7\1\0\4\7"+
    "\52\0\1\25\40\0\10\7\1\113\10\7\1\0\4\7"+
    "\1\114\3\7\1\0\4\7\26\0\21\7\1\0\1\7"+
    "\1\115\1\7\1\116\4\7\1\0\4\7\26\0\5\7"+
    "\1\117\13\7\1\0\10\7\1\0\4\7\60\0\1\120"+
    "\32\0\21\7\1\0\1\121\7\7\1\0\4\7\26\0"+
    "\21\7\1\0\5\7\1\122\2\7\1\0\4\7\76\0"+
    "\1\123\64\0\1\124\64\0\1\125\1\126\13\0\1\127"+
    "\62\0\1\130\64\0\1\57\66\0\7\7\1\131\11\7"+
    "\1\0\10\7\1\0\4\7\26\0\21\7\1\0\1\132"+
    "\7\7\1\0\4\7\26\0\20\7\1\133\1\0\10\7"+
    "\1\0\4\7\26\0\6\7\1\134\12\7\1\0\10\7"+
    "\1\0\4\7\26\0\13\7\1\135\5\7\1\0\10\7"+
    "\1\0\4\7\26\0\21\7\1\0\10\7\1\0\1\136"+
    "\3\7\26\0\12\7\1\137\6\7\1\0\10\7\1\0"+
    "\4\7\26\0\21\7\1\0\3\7\1\140\4\7\1\0"+
    "\4\7\26\0\5\7\1\141\13\7\1\0\10\7\1\0"+
    "\4\7\26\0\12\7\1\142\6\7\1\0\10\7\1\0"+
    "\4\7\26\0\20\7\1\143\1\0\10\7\1\0\4\7"+
    "\26\0\7\7\1\144\11\7\1\0\10\7\1\0\4\7"+
    "\26\0\16\7\1\145\2\7\1\0\10\7\1\0\4\7"+
    "\26\0\10\7\1\146\10\7\1\0\10\7\1\0\4\7"+
    "\26\0\14\7\1\147\4\7\1\0\10\7\1\0\4\7"+
    "\26\0\20\7\1\150\1\0\10\7\1\0\4\7\26\0"+
    "\21\7\1\0\6\7\1\151\1\7\1\0\4\7\17\0"+
    "\3\106\1\53\61\106\7\0\11\7\1\152\7\7\1\0"+
    "\10\7\1\0\4\7\26\0\15\7\1\153\3\7\1\0"+
    "\10\7\1\0\4\7\26\0\21\7\1\0\3\7\1\154"+
    "\4\7\1\0\4\7\26\0\21\7\1\0\1\155\7\7"+
    "\1\0\4\7\26\0\7\7\1\156\11\7\1\0\10\7"+
    "\1\0\4\7\26\0\15\7\1\157\3\7\1\0\10\7"+
    "\1\0\4\7\26\0\7\7\1\160\11\7\1\0\10\7"+
    "\1\0\4\7\26\0\21\7\1\0\1\161\7\7\1\0"+
    "\4\7\26\0\10\7\1\162\10\7\1\0\10\7\1\0"+
    "\4\7\26\0\21\7\1\0\4\7\1\163\3\7\1\0"+
    "\4\7\27\0\1\164\63\0\10\7\1\165\10\7\1\0"+
    "\10\7\1\0\4\7\26\0\5\7\1\166\13\7\1\0"+
    "\10\7\1\0\4\7\26\0\13\7\1\167\5\7\1\0"+
    "\10\7\1\0\4\7\26\0\21\7\1\0\3\7\1\170"+
    "\4\7\1\0\4\7\26\0\13\7\1\171\5\7\1\0"+
    "\10\7\1\0\4\7\26\0\13\7\1\172\5\7\1\0"+
    "\10\7\1\0\4\7\26\0\12\7\1\173\6\7\1\0"+
    "\10\7\1\0\4\7\26\0\21\7\1\0\1\174\7\7"+
    "\1\0\4\7\26\0\13\7\1\175\5\7\1\0\10\7"+
    "\1\0\4\7\26\0\10\7\1\176\10\7\1\0\10\7"+
    "\1\0\4\7\26\0\13\7\1\177\5\7\1\0\10\7"+
    "\1\0\4\7\26\0\15\7\1\200\3\7\1\0\10\7"+
    "\1\0\4\7\26\0\21\7\1\0\4\7\1\201\3\7"+
    "\1\0\4\7\26\0\10\7\1\202\10\7\1\0\10\7"+
    "\1\0\4\7\26\0\12\7\1\134\6\7\1\0\10\7"+
    "\1\0\4\7\26\0\11\7\1\203\7\7\1\0\10\7"+
    "\1\0\4\7\26\0\13\7\1\204\5\7\1\0\10\7"+
    "\1\0\4\7\26\0\11\7\1\205\2\7\1\206\4\7"+
    "\1\0\10\7\1\0\4\7\26\0\15\7\1\207\3\7"+
    "\1\0\10\7\1\0\4\7\30\0\1\210\62\0\21\7"+
    "\1\0\7\7\1\211\1\0\4\7\26\0\7\7\1\212"+
    "\11\7\1\0\10\7\1\0\4\7\26\0\15\7\1\213"+
    "\3\7\1\0\10\7\1\0\4\7\26\0\13\7\1\214"+
    "\5\7\1\0\10\7\1\0\4\7\26\0\21\7\1\0"+
    "\3\7\1\215\4\7\1\0\4\7\26\0\21\7\1\0"+
    "\1\216\7\7\1\0\4\7\26\0\7\7\1\217\11\7"+
    "\1\0\10\7\1\0\4\7\26\0\14\7\1\220\4\7"+
    "\1\0\10\7\1\0\4\7\26\0\13\7\1\221\5\7"+
    "\1\0\10\7\1\0\4\7\26\0\21\7\1\0\1\222"+
    "\7\7\1\0\4\7\26\0\13\7\1\223\5\7\1\0"+
    "\10\7\1\0\4\7\26\0\1\224\64\0\5\7\1\225"+
    "\13\7\1\0\10\7\1\0\4\7\26\0\20\7\1\226"+
    "\1\0\10\7\1\0\4\7\26\0\21\7\1\0\4\7"+
    "\1\227\3\7\1\0\4\7\26\0\13\7\1\230\5\7"+
    "\1\0\10\7\1\0\4\7\26\0\20\7\1\231\1\0"+
    "\10\7\1\0\4\7\26\0\5\7\1\232\13\7\1\0"+
    "\10\7\1\0\4\7\31\0\1\233\61\0\21\7\1\0"+
    "\3\7\1\234\4\7\1\0\4\7\26\0\10\7\1\235"+
    "\10\7\1\0\10\7\1\0\4\7\26\0\21\7\1\0"+
    "\1\236\7\7\1\0\4\7\26\0\6\7\1\237\12\7"+
    "\1\0\10\7\1\0\4\7\26\0\17\7\1\240\1\7"+
    "\1\0\10\7\1\0\4\7\32\0\1\241\60\0\21\7"+
    "\1\0\3\7\1\242\4\7\1\0\4\7\26\0\21\7"+
    "\1\0\1\243\7\7\1\0\4\7\26\0\1\244\64\0"+
    "\13\7\1\245\5\7\1\0\10\7\1\0\4\7\32\0"+
    "\1\246\53\0\1\247\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5989];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\31\1\11\11\2\1\6\11\3\0\25\1"+
    "\1\0\11\1\1\11\2\1\4\11\1\0\1\11\33\1"+
    "\1\0\23\1\1\0\13\1\1\0\6\1\1\0\5\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    boolean extendedPascal = false;
    int commentNesting = 0;
    int blockNesting = 0;

    private PascalSym sym(int type) { return new PascalSym(type, yyline + 1, yycolumn + 1, yytext()); }
    
    private String GetOutputString() { return "\""+yytext()+"\", row "+(yyline+1)+"  col "+(yycolumn+1); }
    private void ReportWarning() { Report.warning("I have a problem with lexeme "+GetOutputString()); }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PascalLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PascalLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PascalSym next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return sym(PascalTok.SUB);
          }
        case 62: break;
        case 19: 
          { return sym(PascalTok.OR);
          }
        case 63: break;
        case 10: 
          { return sym(PascalTok.LPARENTHESIS);
          }
        case 64: break;
        case 46: 
          { if(extendedPascal) return sym(PascalTok.CASE);  else return sym(PascalTok.IDENTIFIER);
          }
        case 65: break;
        case 32: 
          { return sym(PascalTok.NEQ);
          }
        case 66: break;
        case 41: 
          { return sym(PascalTok.VAR);
          }
        case 67: break;
        case 2: 
          { commentNesting++; yybegin(COMMENT);
          }
        case 68: break;
        case 17: 
          { return sym(PascalTok.GTH);
          }
        case 69: break;
        case 28: 
          { return sym(PascalTok.DOTS);
          }
        case 70: break;
        case 38: 
          { return sym(PascalTok.FOR);
          }
        case 71: break;
        case 51: 
          { return sym(PascalTok.CONST);
          }
        case 72: break;
        case 40: 
          { return sym(PascalTok.NIL);
          }
        case 73: break;
        case 21: 
          { return sym(PascalTok.SEMIC);
          }
        case 74: break;
        case 53: 
          { blockNesting++; return sym(PascalTok.BEGIN);
          }
        case 75: break;
        case 8: 
          { return sym(PascalTok.COMMA);
          }
        case 76: break;
        case 61: 
          { System.out.println(":-) Using extended features."); extendedPascal = true; return sym(PascalTok.EXTENDED);
          }
        case 77: break;
        case 59: 
          { return sym(PascalTok.FUNCTION);
          }
        case 78: break;
        case 25: 
          { return sym(PascalTok.OF);
          }
        case 79: break;
        case 29: 
          { return sym(PascalTok.ASSIGN);
          }
        case 80: break;
        case 24: 
          { return sym(PascalTok.TO);
          }
        case 81: break;
        case 11: 
          { return sym(PascalTok.RPARENTHESIS);
          }
        case 82: break;
        case 1: 
          { ReportWarning();
          }
        case 83: break;
        case 55: 
          { return sym(PascalTok.RECORD);
          }
        case 84: break;
        case 13: 
          { return sym(PascalTok.MUL);
          }
        case 85: break;
        case 36: 
          { if(extendedPascal) return sym(PascalTok.MOD);   else return sym(PascalTok.IDENTIFIER);
          }
        case 86: break;
        case 23: 
          { commentNesting--; if(commentNesting<=0) yybegin(YYINITIAL);
          }
        case 87: break;
        case 35: 
          { blockNesting--; /*if(blockNesting < 0) Report.warning("There is no block to end here. "+GetOutputString());*/ return sym(PascalTok.END);
          }
        case 88: break;
        case 20: 
          { return sym(PascalTok.PTR);
          }
        case 89: break;
        case 6: 
          { return sym(PascalTok.DOT);
          }
        case 90: break;
        case 31: 
          { return sym(PascalTok.LEQ);
          }
        case 91: break;
        case 58: 
          { return sym(PascalTok.PROGRAM);
          }
        case 92: break;
        case 5: 
          { return sym(PascalTok.INT_CONST);
          }
        case 93: break;
        case 9: 
          { return sym(PascalTok.LBRACKET);
          }
        case 94: break;
        case 45: 
          { return sym(PascalTok.TYPE);
          }
        case 95: break;
        case 14: 
          { return sym(PascalTok.ADD);
          }
        case 96: break;
        case 52: 
          { if(extendedPascal) return sym(PascalTok.LABEL); else return sym(PascalTok.IDENTIFIER);
          }
        case 97: break;
        case 50: 
          { return sym(PascalTok.ARRAY);
          }
        case 98: break;
        case 48: 
          { return sym(PascalTok.ELSE);
          }
        case 99: break;
        case 57: 
          { return sym(PascalTok.INT);
          }
        case 100: break;
        case 43: 
          { return sym(PascalTok.BOOL_CONST);
          }
        case 101: break;
        case 44: 
          { return sym(PascalTok.THEN);
          }
        case 102: break;
        case 18: 
          { return sym(PascalTok.LTH);
          }
        case 103: break;
        case 39: 
          { return sym(PascalTok.NOT);
          }
        case 104: break;
        case 34: 
          { return sym(PascalTok.AND);
          }
        case 105: break;
        case 26: 
          { return sym(PascalTok.DO);
          }
        case 106: break;
        case 49: 
          { if(extendedPascal) return sym(PascalTok.GOTO);  else return sym(PascalTok.IDENTIFIER);
          }
        case 107: break;
        case 22: 
          { commentNesting++;
          }
        case 108: break;
        case 37: 
          { return sym(PascalTok.DIV);
          }
        case 109: break;
        case 7: 
          { return sym(PascalTok.COLON);
          }
        case 110: break;
        case 4: 
          { return sym(PascalTok.IDENTIFIER);
          }
        case 111: break;
        case 33: 
          { return sym(PascalTok.CHAR_CONST);
          }
        case 112: break;
        case 27: 
          { return sym(PascalTok.IF);
          }
        case 113: break;
        case 47: 
          { return sym(PascalTok.CHAR);
          }
        case 114: break;
        case 12: 
          { return sym(PascalTok.RBRACKET);
          }
        case 115: break;
        case 56: 
          { return sym(PascalTok.BOOL);
          }
        case 116: break;
        case 54: 
          { return sym(PascalTok.WHILE);
          }
        case 117: break;
        case 42: 
          { if(extendedPascal) return sym(PascalTok.AUTO);  else return sym(PascalTok.IDENTIFIER);
          }
        case 118: break;
        case 60: 
          { return sym(PascalTok.PROCEDURE);
          }
        case 119: break;
        case 30: 
          { return sym(PascalTok.GEQ);
          }
        case 120: break;
        case 3: 
          { 
          }
        case 121: break;
        case 16: 
          { return sym(PascalTok.EQU);
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     //if(blockNesting > 0) Report.warning("Reached end of file with unclosed block.");
    if(commentNesting > 0) Report.warning("Reached end of file with unclosed comment.");
    return new PascalSym(PascalTok.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
