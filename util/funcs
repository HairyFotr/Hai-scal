#!/bin/bash

export PASCALXSL=xsl

cp="pascal/src/compiler"
cup="pascal/src/java_cup/runtime"
cupjar="lib/java-cup-11a.jar"

lex="$cp/lexanal"
syn="$cp/synanal"
abs="$cp/abstree"
sem="$cp/semanal"
frm="$cp/frames"
imc="$cp/imcode"
lin="$cp/lincode"

cleanLex() {
    rm $lex/PascalLex.java 2> /dev/null
}
cleanSyn() {
    rm $syn/PascalSyn.java 2> /dev/null
    rm $syn/PascalTok.java 2> /dev/null
}
cleanC() { 
    rm `find pascal -name "*.class"` 2> /dev/null
}
cleanAll() { 
    cleanC
    cleanLex
    cleanSyn
    rm `find pascal -name "*~"` 2> /dev/null
    rm `find pascal -name "*.xml"` 2> /dev/null
    rm .compiled*  2> /dev/null
}

compileC() { 
    {
        if [[ ! -e .compiledcup || ! -e $syn/PascalSyn.java || ! -e $syn/PascalTok.java || "$flags" == "-f" || `stat -c %Y .compiledcup` < `stat -c %Y $syn/pascal.cup` ]]
        then 
            cleanSyn
            java -jar $cupjar -package synanal -parser PascalSyn -symbols PascalTok -nonterms -expect 1 $syn/pascal.cup 
            if [ "$?" -ne "0"  ]; then exit; fi
            mv PascalSyn.java $syn
            mv PascalTok.java $syn
            touch .compiledcup
            echo
        fi;
    } && { 
        if [[ ! -e .compiledflex || ! -e $lex/PascalLex.java || "$flags" == "-f" || `stat -c %Y .compiledflex` < `stat -c %Y $lex/pascal.jflex` ]]
        then 
            cleanLex
            jflex $lex/pascal.jflex
            if [ "$?" -ne "0"  ]; then exit; fi
            touch .compiledflex
            echo
        fi;
    } && {
        #javac -cp $cup:$cupjar:$cp/:$abs:$abs/tree:$sem:$sem/type:. `find pascal -name *.java`;
        javac -cp $cup:$cupjar:$cp/:$abs:$abs/tree:$sem:$sem/type:$frm:$imc:. $cup/*.java $cp/report/*.java $lex/*.java $abs/*.java $abs/tree/*.java $syn/*.java $sem/type/*.java $sem/*.java $frm/*.java $imc/*.java $lin/*.java $cp/*.java
    }
}

testC() {
    progs=test/$flags.pascal #`echo test/*.pascal`"
    for i in $(echo $progs | tr " " "\n")
    do
        echo `basename $i`
        cd pascal/src
        java compiler.Main ../../${i%.*} $phase
        if [ $? -ne "0" ]; then exit; fi
        cd ../..
    done
}
